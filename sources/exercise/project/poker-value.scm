; Royal flush: c10 cj cq ck ca
; Straight flush: h2 h3 h4 h5 h6
; Four of a kind: h2 s2 c2 d2 h3
; Full house: h2 s2 c2 h3 s3
; Straight: h2 c3 d4 c5 d6
; Three of a kind: h2 s2 c2 h3 s4
; Tow pair: h2 c2 h3 c3 h4
; Pair: h2 c2 h3 h5 c3
; Nothing: h2 c4 hq da c6

; (suit '(h2 c4 hq da c6)) -> '(h c h d c)
; (is-flush? '(h c h d c)) -> #f
; (rank '(h2 c4 hq da c6)) -> '(2 4 q a 6)
; (replace '(2 4 q a 6)) -> '(2 4 12 a 6)
; (maybe '(2 4 12 a 6)) -> '((2 4 12 1 6) (2 4 12 14 6))
; (sort '(2 4 12 1 6)) -> '(1 2 4 12 6)
; (get-odd '(2 4 12 1 6)) -> '(2 12 6)
; (get-even '(2 4 12 1 6)) -> '(4 1)
; (is-straight? '(1 2 4 12 6)) -> #f
; (count '(1 2 4 12 6)) -> '(1 1 1 1 1)
; (is-three-of-a-kind? '(1 1 1 1 1)) -> #f
; (is-two-pair? '(1 1 1 1 1)) -> #f
; (is-pair? '(1 1 1 1 1)) -> #f
; (val '(2 4 12 1 6)) -> '(Nothing 12)
; (max-val '((Nothing 12) (Nothing 4))) -> '(Nothing 14)

; (suit '(h2 c4 hq da c6)) -> '(h c h d c)
(define (suit hands)
  (if (empty? hands)
      '()
      (se (first (first hands)) (suit (bf hands)))))
; (is-flush? '(h c h d c)) -> #f
(define (is-flush? suits)
  (if (< (count suits) 2)
      #t
      (and (equal? (first suits) (first (bf suits)))
           (is-flush? (bf suits)))))
; (rank '(h2 c4 hq da c6)) -> '(2 4 q a 6)
(define (rank hands)
  (if (empty? hands)
      '()
      (se (bf (first hands)) (rank (bf hands)))))
; (replace '(2 4 q a 6)) -> '(2 4 12 a 6)
(define (replace ranks)
  (if (empty? ranks)
      '()
      (se (replace-helper (first ranks)) (replace (bf ranks)))))
(define (replace-helper rank)
  (cond ((equal? 'j rank) 11)
        ((equal? 'q rank) 12)
        ((equal? 'k rank) 13)
        (else rank)))
; (maybe '(2 4 12 a 6)) -> '((2 4 12 1 6) (2 4 12 14 6))
(define (maybe ranks)
  (if 
; (sort '(2 9 3 5 7 9)) -> '(2 2 3 5 7 9)
(define (sort ranks)
  (if (< (count ranks) 2)
      ranks
      (sort-helper (sort (get-odd ranks))
                   (sort (get-even ranks)))))
; (sort-helper '(2 3 5) '(4 6 8)) -> '(2 3 4 5 6 8)
(define (sort-helper left right)
  (cond ((empty? left) right)
        ((empty? right) left)
        ((< (first left) (first right))
         (se (first left) (sort-helper (bf left) right)))
        (else (se (first right) (sort-helper left (bf right))))))
; (get-odd '(10 j q k)) -> '(10 q)
(define (get-odd ranks)
  (cond ((< (count ranks) 2) ranks)
        (else (se (first ranks) (get-odd (bf (bf ranks)))))))
; (get-even '(10 j q k)) -> '(j k)
(define (get-even ranks)
  (cond ((< (count ranks) 2) '())
        (else (se (first (bf ranks)) (get-even (bf (bf ranks)))))))

; (poker-value '(h4 s4 c6 s6 c4)) -> '(full house - fours over sixes)
(define (porker-value hands)
  (cond ((is-royal-flush? hands)) 
        ((is-straight-flush? hands))
        ((is-four-of-a-kind? hands))
        ((is-full-house? hands))
        ((is-sraight? hands))
        ((is-three-of-a-kind? hands))
        ((is-two-pair? hands))
        ((is-pair? hands))
        (else 'nothing)))
; (is-royal-flush? '(c10 cj cq ck ca)) -> '(royal flush - diamonds)
(define (is-royal-flush? hands)
  (and (straight? hands) (flush? hands) '(royal flush - diamonds)))
; (straight? '(c10 cj cq ck ca)) -> #t
(define (straight? hands)
  (straight-helper (format (get-rank hands))))
; (straight-helper '(1 2 3 4 5)) -> #t
(define (straight-helper ranks)
  (cond ((< (count ranks) 2) #t)
        (else (and (= 1 (- (first (bf ranks)) (first ranks)))
                   (straight-helper (bf ranks))))))
; (format '(10 j q k)) -> '(10 11 12 13)
(define (format ranks)
  (every format-rank ranks))
(define (format-rank rank)
  (cond ((equal? 'j rank) 11)
        ((equal? 'q rank) 12)
        ((equal? 'k rank) 13)
        (else rank)))
; (get-ranks '(c10 cj cq ck ca)) -> '(10 j q k a)
(define (get-ranks hands)
  (if (empty? hands)
      '()
      (se (bf (first hands)) (get-ranks (bf hands)))))
; (get-suit '(c10 cj cq ck ca)) -> '(c c c c c)
(define (get-suit hands)
  (if (empty? hands)
      '()
      (se (first (first hands)) (get-suit (bf hands)))))
; (flush-suits? '(c c c c c)) -> #t
(define (flush-suits? suits)
  (if (< (count suits) 2)
      #t
      (if (equal? (first suits) (first (bf suits)))
          (flush-suits? (bf suits))
          #f)))
; (flush? '(c10 cj cq ck ca)) -> #t
(define (flush? hands)
  (flush-suits? (get-suit hands)))
; (rid 'a '(10 j q k a)) -> '(10 j q k) 
(define (rid rank ranks)
  (if (empty? ranks)
      '()
      (if (equal? rank (first ranks))
          (rid rank (bf ranks))
          (se (first ranks) (rid rank (bf ranks))))))
; (sort '(1 9 3 5 9)) -> '(1 3 5 9 9)
(define (sort ranks)
  (if (empty? ranks)
      '()
      (
; (get-odd '(10 j q k)) -> '(10 q)
(define (get-odd ranks)
  (cond ((< (count ranks) 2) ranks)
        (else (se (first ranks) (get-odd (bf (bf ranks)))))))
; (get-even '(10 j q k)) -> '(j k)
(define (get-even ranks)
  (cond ((< (count ranks) 2) '())
        (else (se (first (bf ranks)) (get-even (bf (bf ranks)))))))
