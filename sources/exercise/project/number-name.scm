(define units-sent '(thousand million billion trillion quadrillion quintillion
  sextillion septillion octillion nonillion decillion))
; (number-name 123456789) 
; -> (one hundred twenty three million four hundred fifty six thousand seven hundred eighty nine)
(define (number-name num)
  (number-name-helper (units-helper (partition num) units-sent)))
; (number-name-helper '(123 million 456 thousand 789)) 
; -> (one hundred twenty three million four hundred fifty six thousand seven hundred eighty nine)
(define (number-name-helper sent)
  (if (< (count sent) 2)
      (three-digit (first sent))
      (se (three-digit (first sent)) 
          (first (bf sent))
          (number-name-helper (bf (bf sent))))))
; (units-helper '(123 456 789) units-sent) -> (123 million 456 thousand 789)
(define (units-helper sent units)
  (if (< (count sent) 2)
      sent
      (se (units-helper (bl sent) (bf units)) (first units) (last sent))))
; (partition 123456789) -> (123 456 789)
(define (partition wd)
  (if (<= (count wd) 3)
      (se wd)
      (se (partition (bl (bl (bl wd)))) 
          (word (last (bl (bl wd)))
                (last (bl wd))
                (last wd)))))
(define (units-digit num)
  (cond ((equal? num 1) 'one)
        ((equal? num 2) 'two)
        ((equal? num 3) 'three)
        ((equal? num 4) 'four)
        ((equal? num 5) 'five)
        ((equal? num 6) 'six)
        ((equal? num 7) 'seven)
        ((equal? num 8) 'eight)
        ((equal? num 9) 'nine)
        (else #f)))
(define (special-number num)
  (cond ((equal? num 10) 'ten)
        ((equal? num 11) 'eleven)
        ((equal? num 12) 'twelve)
        (else #f)))
(define (tens-digit num)
  (cond ((equal? num 20) 'twenty)
        ((equal? num 30) 'thirty)
        ((equal? num 40) 'forty)
        ((equal? num 50) 'fifty)
        ((equal? num 60) 'sixty)
        ((equal? num 70) 'seventy)
        ((equal? num 80) 'eighty)
        ((equal? num 90) 'ninety)
        (else #f)))
; (double-digit 23) -> (twenty three)
(define (double-digit num)
  (cond ((equal? 0 (first num)) (double-digit (bf num)))
        ((< (count num) 2) (units-digit num))
        ((special-number num))
        ((tens-digit num))
        (else (and (= 2 (count num)) (se (tens-digit (* 10 (first num))) (units-digit (last num)))))))
; (three-digit 123) -> (one hundred twenty three)
(define (three-digit num)
  (cond ((double-digit num))
        (else (and (= (count num) 3) 
                   (se (units-digit (first num)) 'hundred (double-digit (bf num)))))))
