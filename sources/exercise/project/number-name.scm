(define '(thousand million billion trillion quadrillion quintillion
  sextillion septillion octillion nonillion decillion))
(define (partition wd)
  (if (<= (count wd) 3)
      wd
      (se (partition (bl (bl (bl wd)))) 
          (word (last (bl (bl wd)))
                (last (bl wd))
                (last wd)))))
(define (units-digit num)
  (cond ((equal? num 1) 'one)
        ((equal? num 2) 'two)
        ((equal? num 3) 'three)
        ((equal? num 4) 'four)
        ((equal? num 5) 'five)
        ((equal? num 6) 'six)
        ((equal? num 7) 'seven)
        ((equal? num 8) 'eight)
        ((equal? num 9) 'nine)
        (else #f)))
(define (double-digit num)
  (cond ((special-number num))
        ((tens-digit num))
        (else (se tens-digit (* 10 (first num))) (units-digit (last num)))))
(define (special-number num)
  (cond ((equal? num 10) 'ten)
        ((equal? num 11) 'eleven)
        ((equal? num 12) 'twelve)
        (else #f)))
(define (tens-digit num)
  (cond ((equal? num 20) 'twenty)
        ((equal? num 30) 'thirty)
        ((equal? num 40) 'forty)
        ((equal? num 50) 'fifty)
        ((equal? num 60) 'sixty)
        ((equal? num 70) 'seventy)
        ((equal? num 80) 'eighty)
        ((equal? num 90) 'ninety)
        (else #f)))
